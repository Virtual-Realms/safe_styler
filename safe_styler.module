<?php

/**
 * Implements hook_init().
 */
function safe_styler_init() {

  $file_uri = path_to_theme() . "/css/safe-styles.css";
  if (file_exists($file_uri)) {
    drupal_add_css($file_uri, array(
      'type' => 'file',
      'group' => CSS_THEME,
      'every_page' => TRUE,
      'weight'=> 2000,
      'media' => 'all',
      'preprocess' => TRUE)
    );
  }
}

/**
 * Implements hook_form_system_theme_settings_alter()
 */
function safe_styler_form_system_theme_settings_alter(&$form, &$form_state) {

  // If safe-styles.css exists for the current theme create a form interface
  // for it, otherwise do nothing
  $file_uri = path_to_theme() . "/css/safe-styles.css";
  if (file_exists($file_uri)) {
    $css = file_get_contents($file_uri);
    //drupal_set_message($css);      
    //drupal_set_message(dpm($css));      

    // Add spectrum color picker js and css http://bgrins.github.io/spectrum
    // Requires libraries API and spectrum installed in
    // libraries/bgrins-spectrum as per color_field install instructions
    drupal_add_js(libraries_get_path('bgrins-spectrum') . '/spectrum.js');
    drupal_add_css(libraries_get_path('bgrins-spectrum') . '/spectrum.css');
    $spectrum_js = 'jQuery(".spectrum").spectrum({
      showInput: true,
      allowEmpty: true,
      showAlpha: true,
      showInitial: true,
      showInput: true,
      preferredFormat: "rgb",
      clickoutFiresChange: true,
      showButtons: false
    });';
    drupal_add_js($spectrum_js, array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 5)
    );


    $layout_header  = '<div class=""><div class="layout-header theme-settings-header clearfix">';
    $layout_header .= '<h1>' . t('Safe Styler Settings') . '</h1>';
    //$layout_header .= '<p class="docs-link"><a href="http://adaptivethemes.com/documentation/adaptivetheme-7x-3x" title="View online documentation" target="_blank">View online documentation</a></p>';
    //$layout_header .= '<p class="logo-link"><a href="http://adaptivethemes.com" title="Adaptivethemes.com - Rocking the hardest since 2006" target="_blank"><img class="at-logo" src="' . $logo . '" /></a></p>';
    $layout_header .= '</div>';

    $form['safe_styler'] = array(
      '#type' => 'vertical_tabs',
      '#description' => t('Layout'),
      '#prefix' => $layout_header,
      '#suffix' => '</div>',
      '#weight' => -10,
      //'#attached' => array(
      //  'css' => array(drupal_get_path('theme', 'adaptivetheme') . '/css/at.settings.form.css'),
      //),
    );

    // Parse CSS file into array
    $rules = _safe_styler_css2array($css);

    // Convert CSS rules array to form elements
    foreach($rules AS $i=>$rule) {

      // Begin unique array key
      $unique_key_prefix = 'safe-styler_' . $i . '_';

      // Get and use group from CSS rule comment as title of vertical tab
      $group = $rule['group'];
      if (!array_key_exists($group, $form['safe_styler'])) { // don't overwrite existing
        $form['safe_styler'][$group] = array(
          '#type' => 'fieldset',
          '#title' => $group,
        );
      }

      // Also store CSS group in hidden form field
      $unique_key = $unique_key_prefix . 'group';
      $form['safe_styler'][$group][$unique_key] = array(
        '#type' => 'hidden',
        '#value' => $group,
      );

      // Get and use CSS rule comment as title of inner fieldset
      $comment = $rule['comment'];
      if (!array_key_exists($comment, $form['safe_styler'][$group])) { // don't overwrite existing
        $form['safe_styler'][$group][$comment] = array(
          '#type' => 'fieldset',
          '#title' => $comment,
        );
      }

      // Also store CSS comment in hidden form field
      $unique_key = $unique_key_prefix . 'comment';
      $form['safe_styler'][$group][$comment][$unique_key] = array(
        '#type' => 'hidden',
        '#value' => $comment,
      );

      // Get and store CSS selector in hidden form field
      $unique_key = $unique_key_prefix . 'selector';
      $selector = $rule['selector'];
      $form['safe_styler'][$group][$comment][$unique_key] = array(
        '#type' => 'hidden',
        '#value' => $selector,
      );

      // Process CSS declarations and flag which property is last so that we can
      // close the declaration block when generating and saving the CSS on submit
      $declarations = $rule['declarations'];
      $num_declatations = count($declarations);
      $cur_declaration = 0;
      foreach($declarations AS $property=>$value) {
        $cur_declaration++;
        $last_flag = ($cur_declaration == $num_declatations) ? '-last_' : '_';
        $unique_key = $unique_key_prefix . 'property' . $last_flag . $property;
        $form['safe_styler'][$group][$comment][$unique_key] = _safe_styler_get_form_elements($unique_key, $property, $value);
      }
    }
    
    // Attach custom submit handler to the form
    $form['#submit'][] = '_safe_styler_system_theme_settings_submit';

    //dpm($form);
  }
}


/**
 *  Return the correct form element array for a CSS property:value pair.
 */
function _safe_styler_get_form_elements($unique_key, $property, $value) {

  $elements = array();

  // Convert CSS property to friendlier form field label
  $title = ucwords(str_replace("-", " ", $property));

  $length_unit_options = drupal_map_assoc(array('px', 'pt', 'in', 'cm', 'mm', 'pc', 'em', 'ex', '%'));
  $auto_other_options = array(
      'auto' => t('Auto'),
      'other' => t('Other ...'),
  );

  // Web safe font stack options from http://cssfontstack.com/
  $font_stack_options = array(
    // Sans Serif
    'Arial' => 'Arial, "Helvetica Neue", Helvetica, sans-serif',
    'Arial Black' => '"Arial Black", "Arial Bold", Gadget, sans-serif',
    'Arial Narrow' => '"Arial Narrow", Arial, sans-serif',
    'Arial Rounded MT Bold' => '"Arial Rounded MT Bold", "Helvetica Rounded", Arial, sans-serif',
    'Avant Garde' => '"Avant Garde", Avantgarde, "Century Gothic", CenturyGothic, "AppleGothic", sans-serif',
    'Calibri' => 'Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif',
    'Candara' => 'Candara, Calibri, Segoe, "Segoe UI", Optima, Arial, sans-serif',
    'Century Gothic' => '"Century Gothic", CenturyGothic, AppleGothic, sans-serif',
    'Franklin Gothic Medium' => '"Franklin Gothic Medium", "Franklin Gothic", "ITC Franklin Gothic", Arial, sans-serif',
    'Futura' => 'Futura, "Trebuchet MS", Arial, sans-serif',
    'Geneva' => 'Geneva, Tahoma, Verdana, sans-serif',
    'Gill Sans' => '"Gill Sans", "Gill Sans MT", Calibri, sans-serif',
    'Helvetica' => '"Helvetica Neue", Helvetica, Arial, sans-serif',
    'Impact' => 'Impact, Haettenschweiler, "Franklin Gothic Bold", Charcoal, "Helvetica Inserat", "Bitstream Vera Sans Bold", "Arial Black", sans serif',
    'Lucida Grande' => '"Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Geneva, Verdana, sans-serif',
    'Optima' => 'Optima, Segoe, "Segoe UI", Candara, Calibri, Arial, sans-serif',
    'Segoe UI' => '"Segoe UI", Frutiger, "Frutiger Linotype", "Dejavu Sans", "Helvetica Neue", Arial, sans-serif',
    'Tahoma' => 'Tahoma, Verdana, Segoe, sans-serif',
    'Trebuchet MS' => '"Trebuchet MS", "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Tahoma, sans-serif',
    'Verdana' => 'Verdana, Geneva, sans-serif',
    // Serif
    'Baskerville' => 'Baskerville, "Baskerville Old Face", "Hoefler Text", Garamond, "Times New Roman", serif',
    'Big Caslon' => '"Big Caslon", "Book Antiqua", "Palatino Linotype", Georgia, serif',
    'Bodoni MT' => '"Bodoni MT", Didot, "Didot LT STD", "Hoefler Text", Garamond, "Times New Roman", serif',
    'Book Antiqua' => '"Book Antiqua", Palatino, "Palatino Linotype", "Palatino LT STD", Georgia, serif',
    'Calisto MT' => '"Calisto MT", "Bookman Old Style", Bookman, "Goudy Old Style", Garamond, "Hoefler Text", "Bitstream Charter", Georgia, serif',
    'Cambria' => 'Cambria, Georgia, serif',
    'Didot' => 'Didot, "Didot LT STD", "Hoefler Text", Garamond, "Times New Roman", serif',
    'Garamond' => 'Garamond, Baskerville, "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif',
    'Georgia' => 'Georgia, Times, "Times New Roman", serif',
    'Goudy Old Style' => '"Goudy Old Style", Garamond, "Big Caslon", "Times New Roman", serif',
    'Hoefler Text' => '"Hoefler Text", "Baskerville old face", Garamond, "Times New Roman", serif',
    'Lucida Bright' => '"Lucida Bright", Georgia, serif',
    'Palatino' => 'Palatino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif',
    'Perpetua' => 'Perpetua, Baskerville, "Big Caslon", "Palatino Linotype", Palatino, "URW Palladio L", "Nimbus Roman No9 L", serif',
    'Rockwell' => 'Rockwell, "Courier Bold", Courier, Georgia, Times, "Times New Roman", serif',
    'Rockwell Extra Bold' => '"Rockwell Extra Bold", "Rockwell Bold", monospace',
    'Times New Roman' => 'TimesNewRoman, "Times New Roman", Times, Baskerville, Georgia, serif',
    // Monospaced
    'Andale Mono' => '"Andale Mono", AndaleMono, monospace',
    'Consolas' => 'Consolas, monaco, monospace',
    'Courier New' => '"Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace',
    'Lucida Console' => '"Lucida Console", "Lucida Sans Typewriter", Monaco, "Bitstream Vera Sans Mono", monospace',
    'Lucida Sans Typewriter' => '"Lucida Sans Typewriter", "Lucida Console", Monaco, "Bitstream Vera Sans Mono", monospace',
    'Monaco' => 'Monaco, Consolas, "Lucida Console", monospace',
    // Fantasy
    'Copperplate' => 'Copperplate, "Copperplate Gothic Light", fantasy',
    'Papyrus' => 'Papyrus, fantasy',
    // Script
    'Brush Script MT' => '"Brush Script MT", cursive',
  );

  /*$fontyourface_font_options = fontyourface_get_fonts();
  dpm($fontyourface_font_options);*/

  switch ($property) {
    case "color":
    case "border-color":
    case "background-color":
      $elements = array(
        '#type' => 'textfield',
        '#title' => $title,
        '#default_value' => $value,
        '#attributes' => array('class' => array('spectrum')),
      );
      break;
    case "font-family":
      $elements = array(
        '#type' => 'select',
        '#title' => $title,
        '#options' => array_flip($font_stack_options),
        '#default_value' => $value,
      );
      break;
    case "height":
    case "width":

      if ($value == 'auto') {
        $auto_other = 'auto';
        $number = '100'; // TODO: grab from saved form var
        $units = '%'; // TODO: grab from saved form var
      }
      else {
        $auto_other = 'other';
        $value_parts = preg_split('/(?<=[0-9])(?=[a-z]+)/i', $value); // TODO: doesn't yet account for '%'
        $number = $value_parts[0];
        $units = $value_parts[1];
      }

      $elements = array(
        '#type' => 'container',
        '#prefix' => '<label>' . $title . '</label>',    
        '#attributes' => array('class' => array('container-inline')), 
        $unique_key . '_raw' => array(
          '#type' => 'hidden',
          '#default_value' => $value,
        ),
        $unique_key . '_auto-other' => array(
          '#type' => 'select',
          '#options' => $auto_other_options,
          '#default_value' => $auto_other,
        ),
        $unique_key . '_number' => array(
          '#type' => 'textfield',
          '#size' => '3',
          '#default_value' => $number,
          '#states' => array(
            'visible' => array(
              ':input[name="' . $unique_key . '_auto-other"]' => array('value' => 'other'),
            ),
          ),
        ),
        $unique_key . '_units' => array(
          '#type' => 'select',
          '#options' => $length_unit_options,
          '#default_value' => $units,
          '#states' => array(
            'visible' => array(
              ':input[name="' . $unique_key . '_auto-other"]' => array('value' => 'other'),
            ),
          ),
        ),
      );
      break;
  }

  return $elements;
}

/**
 *  Custom submit handler for theme settings form.
 */
function _safe_styler_system_theme_settings_submit(&$form, &$form_state) {

  // Regenerate CSS file based on form values
  $css = '';

  foreach($form_state['values'] AS $key=>$value) {
    $key_parts = explode('_', $key);
    if($key_parts[0] == 'safe-styler') {
      $index = $key_parts[1];
      $type = $key_parts[2];

      switch ($type) {
        case 'group':
          $css .= "/* " . $value . ": ";
          break;
        case 'comment':
          $css .= $value . " */\r\n";
          break;
        case 'selector':
          $css .= $value . " {\r\n";
          break;
        case 'property':
        case 'property-last':
          $property = $key_parts[3];

          $is_multipart = count($key_parts) == 5;

          if (!$is_multipart) {
            $css .= "  " . $property . ": " . $value . ";\r\n";
            $css .= $type == 'property-last' ? "}\r\n\r\n" : "";
          }
          else {
            if ($key_parts[4] == 'raw') { // We only want to process the property once, triggered via this hidden value
              $key = substr($key, 0, -4); // Strip '_raw' from the end of the key

              switch ($property) {
                case "height":
                case "width":
                  $auto_other = $form_state['values'][$key . '_auto-other'];
                  if ($auto_other == 'other') {
                    $value = $form_state['values'][$key . '_number'] . $form_state['values'][$key . '_units'];
                  }
                  else {
                    $value = 'auto';
                  }
                  break;
              }

              $css .= "  " . $property . ": " . $value . ";\r\n";
              $css .= $type == 'property-last' ? "}\r\n\r\n" : "";
            }
          }
          break;
      }
    }
  }

  // Save regenerated CSS file to theme
  $file_uri = path_to_theme() . "/css/safe-styles.css";
  file_unmanaged_save_data($css, $file_uri, FILE_EXISTS_REPLACE);
}

/**
 *  Convert CSS (including above-rule comments) into an array.
 */
function _safe_styler_css2array($css)
{
  $results = array();

  // Find CSS comments and rules using regex voodoo
  $regex_comment = '/\*(.*?)\*/';
  $regex_selector = '(.*?)';
  $regex_declarations = '\{(.*?)\}';
  $regex_pattern = '#' . $regex_comment . $regex_selector . $regex_declarations . '#sm';
  preg_match_all($regex_pattern, $css, $matches);

  // Process each match 
  foreach($matches[0] AS $i=>$match)
  {
    // Split CSS comments into group, which becomes a vertical tab title
    // and comment which becomes the fieldset title
    $comments = explode(":", $matches[1][$i]);
    if (count($comments) < 2) {
      $group = "Other";
      $comment = trim($comments[0]);
    } else {
      $group = trim($comments[0]);
      $comment = trim($comments[1]);
    }
    $results[$i]['group'] = $group;
    $results[$i]['comment'] = $comment;

    $results[$i]['selector'] = trim($matches[2][$i]);
    $declarations = explode(';', $matches[3][$i]);
    foreach($declarations AS $declaration)
    {
      if (strlen(trim($declaration)) > 0) // for missing semicolon on last element, which is legal
      {
        list($property, $value) = explode(':', $declaration);
        $results[$i]['declarations'][trim($property)] = trim($value);
      }
    }
  }

  return $results;
}